import {
  Branch,
  CreateBranchResponse,
  CreateCommitResponse,
  CreatePullRequestResponse,
  CreateTreeResponse,
  GetInstallationRepositoriesResponse,
  GetInstallationsResponse,
} from "./GithubForm.types";

const GITHUB_BASE_URL = `https://api.github.com`;
const commonHeaders = {
  Accept: "application/vnd.github+json",
  "X-GitHub-Api-Version": "2022-11-28",
};

export class GitHubMethods {
  private accessToken: string;
  private owner: string;
  private repositoryName: string;

  constructor(accessToken: string, owner: string, repositoryName: string) {
    this.accessToken = accessToken;
    this.owner = owner;
    this.repositoryName = repositoryName;
  }
  async fetchInstallations() {
    return this.getRequest<GetInstallationsResponse>(`/user/installations`);
  }

  async fetchBranches() {
    return this.getRequest<Branch[]>(
      `/repos/${this.owner}/${this.repositoryName}/branches`
    );
  }

  async fetchRepositories(installationId: string) {
    return this.getRequest<GetInstallationRepositoriesResponse>(
      `/user/installations/${installationId}/repositories`
    );
  }

  async fetchBranch(branchName: string) {
    return this.getRequest<Branch>(
      `/repos/${this.owner}/${this.repositoryName}/branches/${branchName}`
    );
  }

  async createTree(baseTreeSha: string, content: string, filePath: string) {
    return this.postRequest<CreateTreeResponse>(
      `/repos/${this.owner}/${this.repositoryName}/git/trees`,
      {
        tree: [
          {
            path: filePath,
            mode: "100644",
            type: "blob",
            content,
          },
        ],
        base_tree: baseTreeSha,
      }
    );
  }

  async createBranch(newBranchName: string, head: string) {
    return this.postRequest<CreateBranchResponse>(
      `/repos/${this.owner}/${this.repositoryName}/git/refs`,
      {
        ref: `refs/heads/${newBranchName}`,
        sha: head,
      }
    );
  }

  async createCommit(treeSha: string, parentSha: string) {
    return this.postRequest<CreateCommitResponse>(
      `/repos/${this.owner}/${this.repositoryName}/git/commits`,
      {
        message: "chore: update Vexilla feature flags",
        tree: treeSha,
        parents: [parentSha],
      }
    );
  }

  async createPullRequest(branchName: string, baseBranchName: string) {
    return this.postRequest<CreatePullRequestResponse>(
      `/repos/${this.owner}/${this.repositoryName}/pulls`,
      {
        title: "Update Vexilla feature flags",
        head: branchName,
        base: baseBranchName,
        maintainer_can_modify: true,
        body: "This PR was generated by Vexilla",
      }
    );
  }

  private async getRequest<T>(path: string) {
    const Authorization = `Bearer ${this.accessToken}`;

    const url = `${GITHUB_BASE_URL}${path}`;

    const response = await fetch(url, {
      headers: {
        ...commonHeaders,
        Authorization,
      },
    });

    const responseBody: T = await response.json();

    if (response.status !== 200) {
      console.log(`Error fetching ${url}`, responseBody);
      throw new Error(`Error fetching ${url}`);
    } else {
      return responseBody;
    }
  }

  private async postRequest<T>(path: string, payload: Record<string, any>) {
    const Authorization = `Bearer ${this.accessToken}`;

    const url = `${GITHUB_BASE_URL}${path}`;

    const response = await fetch(url, {
      headers: {
        ...commonHeaders,
        Authorization,
        ContentType: "application/json",
      },
      body: JSON.stringify(payload),
    });

    const responseBody: T = await response.json();

    if (response.status !== 200) {
      console.log(`Error fetching ${url}`, responseBody);
      throw new Error(`Error fetching ${url}`);
    } else {
      return responseBody;
    }
  }
}
