LanguageName = 'js'
LanguageDisplayName = "JS/TS"
InstallInstructions = '''
Using npm or yarn, install the package. Typescript types are shipped with it.

```sh
npm install --save @vexilla/client
```

or

```sh
yarn add @vexilla/client
```
'''
CustomInstanceHash = "customInstanceHash"
SyncFlags = "fetchFlags"
SetupSnippet = '''
```javascript
this.client = new VexillaClient({
  baseUrl: 'https://BUCKET_NAME.s3-website-AWS_REGION.amazonaws.com',
  environment: process.env.ENVIRONMENT,
  customInstanceHash: userId
});
this.client.getFlags('features.json');
```
'''
Should = "should"
UsageSnippet = '''
```javascript
client.should(FEATURE_NAME)
```
'''
Example = '''
```javascript
import { VexillaClient } from '@vexilla/client';

export class FeatureFlagsService {
  private client;

  constructor() {
    this.client = new VexillaClient({
      baseUrl: 'https://BUCKET_NAME.s3-website-AWS_REGION.amazonaws.com',
      environment: process.env.ENVIRONMENT,
      customInstanceHash: userId
    });
    this.client.getFlags('features.json');
  }

  should(featureName) {
    return this.client?.should(featureName);
  }
}
```
'''

API = '''
### `constructor(environment: string, base_url: string, instance_id: string): VexillaClient`

Returns a new instance of the Vexilla client

#### Arguments

- environment `string`: The name or ID of the environment you are targeting. This will be used in the lookups of flags and their config.

- baseUrl `string`: The base URL where your JSON files are stored. When fetching flags Vexilla will append the coerced file name to the url. No trailing slash.

- instanceId `string`: The ID, often for a user, to use by default for determining gradual flags and selective flags.

### async getManifest(fetchHook: FetchHook<VexillaManifest>): Promise<VexillaManifest>

Fetches the manifest file for facilitating name->id lookups. Does not set the value on the client. You would need to call `set_manifest` after. Alternatively, you can use `sync_manifest` to do both steps with less code.

#### Arguments

- fetchHook `(url: string) => string`: A callback that is passed the url of the manifest file. You can bring your own http request library.

###  `setManifest(manifest: Manifest): void`

Sets a fetched manifest within the Client instance.

#### Arguments

- manifest `Manifest`: The manifest file to persist into the client. Usually fetched via `get_manifest`.

### `async syncManifest(fetch: (url: string) => Promise<void>`

Fetches and sets the manifest within the client to facilitate name->Id lookups.

#### Arguments

- fetch `(url: &str) => string`: A callback that is passed the url of the manifest file. You can bring your own http request library.

### `async getFlags(file_name: string, fetch: (url: string) => string) -> Promise<string>`

Fetches the flags for a specific flagGroup. Can use the ID or the name of the group for the lookup.

#### Arguments

- fileName `string`: The Name or ID of the flag group you would like to fetch.

- fetch `(url: string) -> string`: A callback that is passed the url of the flag group file. You can bring your own http request library.

### setFlags(groupName: string, flags: PublishedGroup)

Sets a fetched flag group within the Client instance.

#### Arguments

- group_id `&str`: The ID or name of the flag group that you would like to set.

- flags `FlagGroup`: The collection of flags you would like to set. Typically from a `getFlags` call. `syncFlags` wraps both functions to streamline the process.

### async syncFlags(fileName: string, fetch: Callback) -> void

Fetches and sets the flag group within the client to facilitate name->Id lookups.

#### Arguments

- fileName `string`: The Name or ID of the flag group you would like to fetch.

- fetch `(url: string) -> string`: A callback that is passed the url of the flag group file. You can bring your own http request library.

### should(groupName: string, featureName: string, customInstanceHash?: string | number): boolean

Checks if a toggle, gradual, or selective flag should be enabled. Other methods exist for other flag types, such as value. Includes an optional `customInstanceHash` that will be used instead of the value passed to the constructor.

#### Arguments

- groupName `string`: The ID or name of the flag group that you would like to check.

- featureName `string`: The ID or name of the feature flag that you would like to check.

- customInstanceHash[optional] `string | number`: The custom instance value that you would like to compare against. The value that will be used instead of the value passed to the constructor.

### value(groupName: string, featureName: string,
    defaultValue: string | number | null = null): boolean

Checks if a toggle, gradual, or selective flag should be enabled. Other methods exist for other flag types, such as value. Includes an optional `customInstanceHash` that will be used instead of the value passed to the constructor.

#### Arguments

- groupName `string`: The ID or name of the flag group that you would like to check.

- featureName `string`: The ID or name of the feature flag that you would like to check.

- customInstanceHash[optional] `string | number`: The custom instance value that you would like to compare against. The value that will be used instead of the value passed to the constructor.

### value(groupName: string, featureName: string, defaultValue: string | number | null = null): string | number | null

Gets a string value based on environment. Can be useful for things like pricing and subscription plans.

#### Arguments

- groupName `string`: The ID or name of the flag group that you would like to check.

- featureName `string`: The ID or name of the feature flag that you would like to check.

- default `string | number | null`: The default value if the flag is off via scheduling or cannot be fetched.

'''